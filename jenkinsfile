pipeline {

    agent { label 'java8' }
	
    environment {
        EMAIL_RECIPIENTS = 'joao.severo@acad.pucrs,arthur.bueno@acad.pucrs.br'
    }
	
	stages {
	

		stage ('Checkout'){
			node('slave') {
			deleteDir()
			checkout scm
		}

        stage('Build with unit testing') {
            steps {
			
                script {
                    echo 'Pulling...' + env.BRANCH_NAME
                    def mvnHome = tool 'Maven 3.7.0'
					bat(/"${mvnHome}\bin\mvn" -Dintegration-tests.skip=true clean package/)
                        def pom = readMavenPom file: 'pom.xml'
                        print pom.version
                        Configurar======================>junit '**//*target/surefire-reports/TEST-*.xml'
                        Configurar======================>archive 'target*//*.jar'
                }
            }

        }
		
		stage('Integration tests') {
		
            steps {
                script {
                    def mvnHome = tool 'Maven 3.3.9'
                   
                    bat(/"${mvnHome}\bin\mvn" verify -Dunit-tests.skip=true/)
                    

                }
				
                Configurar(?)===============>cucumber buildStatus: null, fileIncludePattern: '**/cucumber.json', jsonReportDirectory: 'target', sortingMethod: 'ALPHABETICAL'
            }
		}
		
		//stage('Test') {
          //  steps {
                /* `make check` returns non-zero on test failures,
                * using `true` to allow the Pipeline to continue nonetheless
                */
            //    sh 'make check || true' 
            //    junit '**/target/*.xml' 
            //}
        //}
	}
		
	post {
		always {
			deleteDir()
		}
		success {
			sendEmail("Successful");
		}
		unstable {
			sendEmail("Unstable");
		}
		failure {
			sendEmail("Failed");
		}
	}

	@NonCPS
	def getChangeString() {
		MAX_MSG_LEN = 100
		def changeString = ""

		echo "Gathering SCM changes"
		def changeLogSets = currentBuild.changeSets
		for (int i = 0; i < changeLogSets.size(); i++) {
			def entries = changeLogSets[i].items
			for (int j = 0; j < entries.length; j++) {
				def entry = entries[j]
				truncated_msg = entry.msg.take(MAX_MSG_LEN)
				changeString += " - ${truncated_msg} [${entry.author}]\n"
			}
		}

		if (!changeString) {
			changeString = " - No new changes"
		}
		return changeString
	}


	def sendEmail(status) {
		mail(
			to: "$EMAIL_RECIPIENTS",
			subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
			body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
	}
}
		
		
		
		
		
		
		
		
		
